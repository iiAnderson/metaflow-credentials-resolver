AWSTemplateFormatVersion: '2010-09-09'
Description: Stack for deployment of Credentials Automator API
Transform: AWS::Serverless-2016-10-31

Parameters:

  ConfigAutomatorLambdaPath:
    Type: String
  ArtifactBucket:
    Type: String
  MetaflowStack:
    Type: String
  MetaflowApiKey:
    Type: String
  APIBasicAuth:
    Type: String
    Default: 'true'
    AllowedValues: ['false', 'true']
    Description: 'Enable basic auth for API Gateway? (requires key export)'

Conditions:
  EnableAuth: !Equals [ !Ref APIBasicAuth, 'true']

Resources:

  Api:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Sub ${AWS::StackName}-credentials-resolver
      Description: "Metaflow Credentials Automator API"

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt Api.RootResourceId
      PathPart: 'creds'
      RestApiId: !Ref Api

  ApiRouteMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      ApiKeyRequired: true
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "ConfigAutomatorLambda.Arn"
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref "Api"

  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt ConfigAutomatorLambda.Arn

  ApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "ApiRouteMethod"
    Properties:
      RestApiId: !Ref "Api"
      StageName: "api"

  ApiUsagePlan:
    Condition: 'EnableAuth'
    Type: "AWS::ApiGateway::UsagePlan"
    DependsOn:
      - Api
      - ApiDeployment
    Properties:
      ApiStages: 
      - ApiId: !Ref Api
        Stage: api
      UsagePlanName: !Join ["", [{"Ref": "AWS::StackName"}, "-usage-plan"]]

  ApiUsagePlanKey:
    Condition: 'EnableAuth'
    Type: "AWS::ApiGateway::UsagePlanKey"
    DependsOn:
      - Api
      - ApiDeployment
    Properties:
      KeyId: !Ref MetaflowApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan

  ConfigAutomatorLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Ref ConfigAutomatorLambdaPath
      FunctionName: !Sub ${AWS::StackName}-creator
      Handler:  handler.lambda_handler
      Role: !GetAtt ConfigAutomatorLambdaRole.Arn
      Runtime: python3.6
      Timeout: 20
      Environment:
        Variables:
          METAFLOW_STACK: !Ref MetaflowStack

  ApiGatewayLambdaInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "ConfigAutomatorLambda.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/GET/"

  ConfigAutomatorLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
              AWS: !Ref AWS::AccountId
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: CloudwatchLoggingPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:GetLogEvents
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: DescribeCloudformationStacksPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource: "*"

Outputs:
  ApiUrl:
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/api"
